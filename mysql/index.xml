<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysqls on Actiger跳跳虎</title>
    <link>https://charles-one.github.io/actiger/mysql/</link>
    <description>Recent content in Mysqls on Actiger跳跳虎</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Dec 2019 16:04:14 +0800</lastBuildDate>
    
	<atom:link href="https://charles-one.github.io/actiger/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MariaDB MySQL连接的2种错误</title>
      <link>https://charles-one.github.io/actiger/mysql/mariadb-mysql%E8%BF%9E%E6%8E%A5%E7%9A%842%E7%A7%8D%E9%94%99%E8%AF%AF/</link>
      <pubDate>Thu, 12 Dec 2019 16:04:14 +0800</pubDate>
      
      <guid>https://charles-one.github.io/actiger/mysql/mariadb-mysql%E8%BF%9E%E6%8E%A5%E7%9A%842%E7%A7%8D%E9%94%99%E8%AF%AF/</guid>
      <description>1. 常见MySQL Mariadb连接的2种错误 错误一 ERROR 1045 (28000): Access denied for user &#39;usera&#39;@&#39;localhost&#39; (using password:YES) 错误二 ERROR 1045 (28000): Access denied for user &#39;usera&#39;@&#39;localhost&#39; (using password:NO). 2. 错误一 常见错误是密码错误 重置密码即可 3. 错误二 输入账号密码时没有输入密码. 1. 命令行中没有-p进行无密码登录 2. 如果是IDE中的yaml文件确定password的缩进正确 cat application.yaml
spring: datasource: driver-class-name: org.mariadb.jdbc.Driver url: jdbc:mariadb://localhost:3306/admin username: admin password: 123456 上面的password缩进错误, 就会提示(using password:No) 正确的是 spring: datasource: driver-class-name: org.mariadb.jdbc.Driver url: jdbc:mariadb://localhost:3306/admin username: admin password: 123456 </description>
    </item>
    
    <item>
      <title>基本SQL语句用法二</title>
      <link>https://charles-one.github.io/actiger/mysql/%E5%9F%BA%E6%9C%ACsql%E8%AF%AD%E5%8F%A5%E7%94%A8%E6%B3%95%E4%BA%8C/</link>
      <pubDate>Fri, 20 Sep 2019 15:56:15 +0800</pubDate>
      
      <guid>https://charles-one.github.io/actiger/mysql/%E5%9F%BA%E6%9C%ACsql%E8%AF%AD%E5%8F%A5%E7%94%A8%E6%B3%95%E4%BA%8C/</guid>
      <description>1.创建表 create table if not exists usrinfo( id INT(11), number INT(11), name VARCHAR(255), birthday DATE );
2.查询表结构 show full columns from usrinfo;
desc usrinfo;
describe usrinfo;
3.查询创建表的语句 show create table usrinfo;
4.插入数据 插入单选数据 insert into usrinfo values (12123123,&amp;ldquo;hello&amp;rdquo;,&amp;ldquo;1990-02-15&amp;rdquo;);
插入多行数据 insert into usrinfo values (12123123,&amp;ldquo;hello&amp;rdquo;,&amp;ldquo;1990-02-15&amp;rdquo;), (12123123,&amp;ldquo;cc&amp;rdquo;,&amp;ldquo;1991-03-01&amp;rdquo;);
插入某些列 insert into usrinfo(number,name) values (121234123,&amp;ldquo;eefef&amp;rdquo;);
插入某些列多行 insert into usrinfo(number,name) values (121234123,&amp;ldquo;eefef&amp;rdquo;), (121234123,&amp;ldquo;eefef&amp;rdquo;);
5.查询某一列不重复的值 select distinct number from usrinfo;
6.增加新的列 增加新列 alter table usrinfo add id int(11);</description>
    </item>
    
    <item>
      <title>基本SQL语句用法</title>
      <link>https://charles-one.github.io/actiger/mysql/%E5%9F%BA%E6%9C%ACsql%E8%AF%AD%E5%8F%A5%E7%94%A8%E6%B3%95/</link>
      <pubDate>Tue, 12 Mar 2019 17:31:56 +0800</pubDate>
      
      <guid>https://charles-one.github.io/actiger/mysql/%E5%9F%BA%E6%9C%ACsql%E8%AF%AD%E5%8F%A5%E7%94%A8%E6%B3%95/</guid>
      <description>建立表 4个表关系 1.学生表
Student(s_id,s_name,s_birth,s_sex) –学生编号,学生姓名, 出生年月,学生性别
2.课程表
Course(c_id,c_name,t_id) – –课程编号, 课程名称, 教师编号
3.教师表
Teacher(t_id,t_name) –教师编号,教师姓名
4.成绩表
Score(s_id,c_id,s_s_score) –学生编号,课程编号,分数
-- 学生表 CREATE TABLE Student( s_id VARCHAR(20), s_name VARCHAR(20) NOT NULL DEFAULT &#39;&#39;, s_birth VARCHAR(20) NOT NULL DEFAULT &#39;&#39;, s_sex VARCHAR(10) NOT NULL DEFAULT &#39;&#39;, PRIMARY KEY(s_id) ); -- 课程表 CREATE TABLE Course( c_id VARCHAR(20), c_name VARCHAR(20) NOT NULL DEFAULT &#39;&#39;, t_id VARCHAR(20) NOT NULL, PRIMARY KEY(c_id) ); -- 教师表 CREATE TABLE Teacher( t_id VARCHAR(20), t_name VARCHAR(20) NOT NULL DEFAULT &#39;&#39;, PRIMARY KEY(t_id) ); -- 成绩表 CREATE TABLE `Score`( s_id VARCHAR(20), c_id VARCHAR(20), s_score INT(3), PRIMARY KEY(s_id,c_id) ); 插入对应的数据 -- 插入学生表测试数据 insert into Student values(&amp;#39;01&amp;#39; , &amp;#39;赵雷&amp;#39; , &amp;#39;1990-01-01&amp;#39; , &amp;#39;男&amp;#39;); insert into Student values(&amp;#39;02&amp;#39; , &amp;#39;钱电&amp;#39; , &amp;#39;1990-12-21&amp;#39; , &amp;#39;男&amp;#39;); insert into Student values(&amp;#39;03&amp;#39; , &amp;#39;孙风&amp;#39; , &amp;#39;1990-05-20&amp;#39; , &amp;#39;男&amp;#39;); insert into Student values(&amp;#39;04&amp;#39; , &amp;#39;李云&amp;#39; , &amp;#39;1990-08-06&amp;#39; , &amp;#39;男&amp;#39;); insert into Student values(&amp;#39;05&amp;#39; , &amp;#39;周梅&amp;#39; , &amp;#39;1991-12-01&amp;#39; , &amp;#39;女&amp;#39;); insert into Student values(&amp;#39;06&amp;#39; , &amp;#39;吴兰&amp;#39; , &amp;#39;1992-03-01&amp;#39; , &amp;#39;女&amp;#39;); insert into Student values(&amp;#39;07&amp;#39; , &amp;#39;郑竹&amp;#39; , &amp;#39;1989-07-01&amp;#39; , &amp;#39;女&amp;#39;); insert into Student values(&amp;#39;08&amp;#39; , &amp;#39;王菊&amp;#39; , &amp;#39;1990-01-20&amp;#39; , &amp;#39;女&amp;#39;); insert into Student values(&amp;#39;09&amp;#39; , &amp;#39;如花&amp;#39; , &amp;#39;1991-02-15&amp;#39; , &amp;#39;女&amp;#39;); -- 课程表测试数据 insert into Course values(&amp;#39;01&amp;#39; , &amp;#39;语文&amp;#39; , &amp;#39;02&amp;#39;); insert into Course values(&amp;#39;02&amp;#39; , &amp;#39;数学&amp;#39; , &amp;#39;01&amp;#39;); insert into Course values(&amp;#39;03&amp;#39; , &amp;#39;英语&amp;#39; , &amp;#39;03&amp;#39;); insert into Course values(&amp;#39;04&amp;#39; , &amp;#39;体育&amp;#39; , &amp;#39;01&amp;#39;); -- 教师表测试数据 insert into Teacher values(&amp;#39;01&amp;#39; , &amp;#39;张三&amp;#39;); insert into Teacher values(&amp;#39;02&amp;#39; , &amp;#39;李四&amp;#39;); insert into Teacher values(&amp;#39;03&amp;#39; , &amp;#39;王五&amp;#39;); -- 成绩表测试数据 insert into Score values(&amp;#39;01&amp;#39; , &amp;#39;01&amp;#39; , 80); insert into Score values(&amp;#39;01&amp;#39; , &amp;#39;02&amp;#39; , 90); insert into Score values(&amp;#39;01&amp;#39; , &amp;#39;03&amp;#39; , 99); insert into Score values(&amp;#39;02&amp;#39; , &amp;#39;01&amp;#39; , 70); insert into Score values(&amp;#39;02&amp;#39; , &amp;#39;02&amp;#39; , 60); insert into Score values(&amp;#39;02&amp;#39; , &amp;#39;03&amp;#39; , 80); insert into Score values(&amp;#39;03&amp;#39; , &amp;#39;01&amp;#39; , 80); insert into Score values(&amp;#39;03&amp;#39; , &amp;#39;02&amp;#39; , 80); insert into Score values(&amp;#39;03&amp;#39; , &amp;#39;03&amp;#39; , 80); insert into Score values(&amp;#39;04&amp;#39; , &amp;#39;01&amp;#39; , 50); insert into Score values(&amp;#39;04&amp;#39; , &amp;#39;02&amp;#39; , 30); insert into Score values(&amp;#39;04&amp;#39; , &amp;#39;03&amp;#39; , 20); insert into Score values(&amp;#39;05&amp;#39; , &amp;#39;01&amp;#39; , 76); insert into Score values(&amp;#39;05&amp;#39; , &amp;#39;02&amp;#39; , 87); insert into Score values(&amp;#39;06&amp;#39; , &amp;#39;01&amp;#39; , 31); insert into Score values(&amp;#39;06&amp;#39; , &amp;#39;03&amp;#39; , 34); insert into Score values(&amp;#39;07&amp;#39; , &amp;#39;02&amp;#39; , 89); insert into Score values(&amp;#39;07&amp;#39; , &amp;#39;03&amp;#39; , 98); insert into Score values(&amp;#39;09&amp;#39;, &amp;#39;01&amp;#39;, 50); insert into Score values(&amp;#39;09&amp;#39;, &amp;#39;02&amp;#39;, 40); insert into Score values(&amp;#39;09&amp;#39;, &amp;#39;03&amp;#39;, 90); insert into Score values(&amp;#39;09&amp;#39;, &amp;#39;04&amp;#39;, 99); SQL练习  查询姓&amp;quot;张&amp;quot;老师的个数  select count(t_id) from Teacher where t_name like &amp;#34;张%&amp;#34;;  查询1990年出生的学生名单  select s_id, s_name from Student where year(s_birth)=1990;  查询课程编号为&amp;quot;02&amp;quot;的总成绩  select c_id,sum(s_score) as &amp;#39;总成绩&amp;#39; from Score where c_id=02;  查询选了课程的学生人数 思路学生唯一, 然后再计算总数  select count(distinct s_id) as &amp;#34;选课人数&amp;#34; from Score;  查询各科成绩最高和最低的分: 以如下的形式显示: 课程ID, 最高分, 最低分  select c_id as 课程ID, max(s_score) as 最高分, min(s_score) as 最低分 from Score group by c_id;  查询每门课程被选修的学生数  select c_id, count(s_id) from Score group by c_id;  查询男生,女生人数  select s_sex as 性别, count(s_id) as 人数 from Student group by s_sex;  查询平均成绩大于60分的学生的学号和平均成绩  学号与平均成绩都在Score表中可以获取到</description>
    </item>
    
  </channel>
</rss>