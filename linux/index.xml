<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linuxes on 小新实验室</title>
    <link>https://charles-one.github.io/xiaoxinLab/linux/</link>
    <description>Recent content in Linuxes on 小新实验室</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 Mar 2019 23:32:03 +0800</lastBuildDate>
    
	<atom:link href="https://charles-one.github.io/xiaoxinLab/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SSH密钥生成配置和登陆服务器与github使用钥匙</title>
      <link>https://charles-one.github.io/xiaoxinLab/linux/ssh%E5%AF%86%E9%92%A5%E7%94%9F%E6%88%90%E9%85%8D%E7%BD%AE%E5%92%8C%E7%99%BB%E9%99%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8Egithub%E4%BD%BF%E7%94%A8%E9%92%A5%E5%8C%99/</link>
      <pubDate>Sat, 30 Mar 2019 23:32:03 +0800</pubDate>
      
      <guid>https://charles-one.github.io/xiaoxinLab/linux/ssh%E5%AF%86%E9%92%A5%E7%94%9F%E6%88%90%E9%85%8D%E7%BD%AE%E5%92%8C%E7%99%BB%E9%99%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8Egithub%E4%BD%BF%E7%94%A8%E9%92%A5%E5%8C%99/</guid>
      <description>1.生成SSH公钥私钥  进入文件夹中(注:所有&amp;rdquo;#&amp;ldquo;表示说明)  cd ~/.ssh/ # 其中-t rsa是指定rsa加密算法, -C &amp;quot;asus&amp;quot;是添加描述asus ssh-keygen -t rsa -C &amp;quot;asus&amp;quot;  # 说明: 默认是保存在/Users/你的用户名/.ssh/下, 如果你指定了名字则保存在当前路径下. # 指定的必须是文件且是绝对路径 # 在这里我已经在 ~/.ssh/中, 默认会保存在这里 Enter file in which to save the key (/Users/username(你的用户名)/.ssh/id_rsa): asus_rsa # 这里提示输入密码, 直接Enter表示不要密码 Enter passphrase (empty for no passphrase): # 与上面输入的密码保持一致, 如果上面没输入,这里也不要输入 Enter same passphrase again:   提示这些信息就表示生成成功  Your identification has been saved in /Users/username/.ssh/asus_rsa. Your public key has been saved in /Users/username/.</description>
    </item>
    
    <item>
      <title>华硕ASUS路由器AC5300莫名重启记录和排查</title>
      <link>https://charles-one.github.io/xiaoxinLab/linux/%E5%8D%8E%E7%A1%95asus%E8%B7%AF%E7%94%B1%E5%99%A8ac5300%E8%8E%AB%E5%90%8D%E9%87%8D%E5%90%AF%E5%92%8C%E6%8E%92%E6%9F%A5/</link>
      <pubDate>Sat, 30 Mar 2019 01:19:45 +0800</pubDate>
      
      <guid>https://charles-one.github.io/xiaoxinLab/linux/%E5%8D%8E%E7%A1%95asus%E8%B7%AF%E7%94%B1%E5%99%A8ac5300%E8%8E%AB%E5%90%8D%E9%87%8D%E5%90%AF%E5%92%8C%E6%8E%92%E6%9F%A5/</guid>
      <description>问题我的华硕路由器有时莫名奇妙的重启 出问题设备和版本 ASUS AC5300 3.0.0.4.384.45149 首先查看系统日志 May 5 13:05:25 weini: [软件中心]: httpdb进程准备就绪！ May 5 13:05:25 WAN Connection: WAN was restored. May 5 13:05:25 WLCEVENTD: eth8: Assoc D4:90:9C:E7:D2:03 May 5 13:05:26 kernel: UBIFS (ubi1:0): UBIFS: mounted UBI device 1, volume 0, name &amp;quot;nvram&amp;quot;, R/O mode May 5 13:05:26 kernel: UBIFS (ubi1:0): LEB size: 126976 bytes (124 KiB), min./max. I/O unit sizes: 2048 bytes/2048 bytes May 5 13:05:26 kernel: UBIFS (ubi1:0): FS size: 5840896 bytes (5 MiB, 46 LEBs), journal size 1015809 bytes (0 MiB, 6 LEBs) May 5 13:05:26 kernel: UBIFS (ubi1:0): reserved for root: 275879 bytes (269 KiB) May 5 13:05:26 kernel: UBIFS (ubi1:0): media format: w4/r0 (latest is w4/r0), UUID ABA6F10C-0F1C-4B89-AD25-4B74DEC12700, small LPT model May 5 13:05:26 kernel: UBIFS (ubi1:0): un-mount UBI device 1 May 5 13:05:26 kernel: ubi1: detaching mtd9 May 5 13:05:26 kernel: ubi1: mtd9 is detached May 5 13:05:26 ntp: start NTP update Mar 30 00:32:50 rc_service: ntp 1229:notify_rc restart_diskmon Mar 30 00:32:50 rc_service: waitting &amp;quot;start_firewall&amp;quot; via udhcpc .</description>
    </item>
    
    <item>
      <title>使用Hugo和GitHub Pages搭建静态网站</title>
      <link>https://charles-one.github.io/xiaoxinLab/linux/%E4%BD%BF%E7%94%A8hugo%E5%92%8Cgithub-pages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/</link>
      <pubDate>Wed, 13 Mar 2019 21:35:23 +0800</pubDate>
      
      <guid>https://charles-one.github.io/xiaoxinLab/linux/%E4%BD%BF%E7%94%A8hugo%E5%92%8Cgithub-pages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/</guid>
      <description>0. 前提条件  电脑安装git(所有平台必要条件) 安装go并设置环境变量(linux下必要条件) 虚拟机Centos7.6.1810  1. 安装hugo  mac直接使用brew install hugo就可以了
 linux下源码安装
   下载并编译
mkdir ~/src cd ~/src git clone https://github.com/gohugoio/hugo.git cd hugo go install  添加环境变量
  # 当前用户~/go文件绝对路径是GOPATH,Go编译后的文件在~/go/bin中 # 如现在当前用户是jenkins vim /etc/profile 添加 export export GOPATH=/var/lib/jenkins/go export PATH=${PATH}:$GOPATH/bin  重新生效/etc/profile文件
source /etc/profile
再次hugo vimersion
就会显示hugo版本, 表示可用
2. 使用Hugo创建个人网站  创建静态网站文件夹  cd ~ hugo new site xiaoxinLab   写第一篇markdown文章, markdown语法参考  cd ~/xiaoxinLab 在目录~/xiaoxinLab下执行hugo new about.</description>
    </item>
    
    <item>
      <title>使用jenkins构建指定版本的Github项目Hugo</title>
      <link>https://charles-one.github.io/xiaoxinLab/linux/%E4%BD%BF%E7%94%A8jenkins%E6%9E%84%E5%BB%BA%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC%E7%9A%84github%E9%A1%B9%E7%9B%AEhugo/</link>
      <pubDate>Wed, 13 Mar 2019 17:02:19 +0800</pubDate>
      
      <guid>https://charles-one.github.io/xiaoxinLab/linux/%E4%BD%BF%E7%94%A8jenkins%E6%9E%84%E5%BB%BA%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC%E7%9A%84github%E9%A1%B9%E7%9B%AEhugo/</guid>
      <description>0. 前提条件, 会使用到jenkins, go语言编译hugo  安装jenkinx&amp;lt;/&amp;gt;
 Linux安装go并设置环境变量
  1. 创建一个jenkins任务  创建一个Jenkins任务   输入Enter an item name, 这里名字是basic_hugo
 选择Github组织
 再选择最左下&amp;rdquo;OK&amp;rdquo;按钮, 创建
  2. 编辑已创建的basic_hugo任务  进入basic_hugo任务编辑页面   进入http://&amp;lt;服务器ip&amp;gt;:8080/me/my-views/view/all/, 在名称下basicd_hugo鼠标悬停上去, 多选, 选择Configure (或者使用Blue Ocean插件http://&amp;lt;服务器ip&amp;gt;:8080/blue/organizations/jenkins/basic_hugo/activity, 选择项目名称旁边的设置齿轮)
 进入编辑页, http://10.211.55.9:8080/job/basic_hugo/configure
   在编辑页中设置github中hugo地址, 参数化分支名称  GitHub项目-&amp;gt;项目URL 填写 https://github.com/gohugoio/hugo.git/
参数化构建过程-&amp;gt;字符参数 Name: BARNCH Default Value: master Description 分支名称
Source Code Management-&amp;gt;Git-&amp;gt;Repositories
Repository URL: https://github.com/gohugoio/hugo.git
Source Code Management-&amp;gt;Git-&amp;gt;Branches to build</description>
    </item>
    
    <item>
      <title>Linux安装go并设置环境变量</title>
      <link>https://charles-one.github.io/xiaoxinLab/linux/linux%E5%AE%89%E8%A3%85go%E5%B9%B6%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</link>
      <pubDate>Wed, 13 Mar 2019 16:36:41 +0800</pubDate>
      
      <guid>https://charles-one.github.io/xiaoxinLab/linux/linux%E5%AE%89%E8%A3%85go%E5%B9%B6%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</guid>
      <description> Mac用户直接使用brew install go即可 Linux用户 wget https://dl.google.com/go/go1.12.linux-amd64.tar.gz
tar -C /usr/local -xzf go1.12.linux-amd64.tar.gz
root用户去编辑vim /etc/profile中添加如下信息
export PATH=$PATH:/usr/local/go/bin  用户使用go需要 重新生效这个文件
source /etc/profile  </description>
    </item>
    
    <item>
      <title>安装jenkins和插件</title>
      <link>https://charles-one.github.io/xiaoxinLab/linux/%E5%AE%89%E8%A3%85jenkins%E5%92%8C%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Wed, 13 Mar 2019 15:47:35 +0800</pubDate>
      
      <guid>https://charles-one.github.io/xiaoxinLab/linux/%E5%AE%89%E8%A3%85jenkins%E5%92%8C%E6%8F%92%E4%BB%B6/</guid>
      <description>0.安装Jenkins, 需要提前安装JDK 1.8 安装JDK参考
1.安装Jnekins  尽量翻墙执行,否则容易报443错误  sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key yum search jenkins sudo yum install jenkins  2. 启动服务与添加防火墙端口  启动jenkins  systemctl start jenkins 如果这里有报错信息,并且提示 &amp;ldquo;systemctl status jenkins.service&amp;rdquo; and &amp;ldquo;journalctl -xe&amp;rdquo; for details 查看详情
journalctl -xe可以看到原因/usr/bin/java: 没有那个文件或目录
需要更改vim /etc/init.d/jenkins
candidates=&amp;quot; /etc/alternatives/java /usr/lib/jvm/java-1.8.0/bin/java /usr/lib/jvm/jre-1.8.0/bin/java /usr/lib/jvm/java-1.7.0/bin/java /usr/lib/jvm/jre-1.7.0/bin/java /usr/java/jdk1.8.0_152/bin/java 这个是修改后的jdk路径（修改前是/usr/bin/java） &amp;quot;  systemctl daemon-reload (重新加载工具)
systemctl start jenkins (再次启动jenkins)
 检查是否能访问成功  jenkins 使用的8080端口</description>
    </item>
    
    <item>
      <title>设置用户可sudo命令</title>
      <link>https://charles-one.github.io/xiaoxinLab/linux/%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E5%8F%AFsudo%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 12 Mar 2019 22:16:35 +0800</pubDate>
      
      <guid>https://charles-one.github.io/xiaoxinLab/linux/%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E5%8F%AFsudo%E5%91%BD%E4%BB%A4/</guid>
      <description>vi /etc/sudoers # new cc ALL=/bin/yum # cc用户名就可使用sudo yum  在cc用户下 sudo yum install vim 输入密码后再就可安装vim了</description>
    </item>
    
    <item>
      <title>下载安装JDK和设置JDK环境变量</title>
      <link>https://charles-one.github.io/xiaoxinLab/linux/%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85jdk%E5%92%8C%E8%AE%BE%E7%BD%AEjdk%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</link>
      <pubDate>Tue, 12 Mar 2019 16:20:56 +0800</pubDate>
      
      <guid>https://charles-one.github.io/xiaoxinLab/linux/%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85jdk%E5%92%8C%E8%AE%BE%E7%BD%AEjdk%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</guid>
      <description>0. 准备工作  root用户及密码  1. 卸载原有JDK rpm -qa | grep &amp;quot;java&amp;quot;  yum remove 上面筛选内容
2. 下载JDK, 解压 进入https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html 右键选择linux x64 jdk-8u201-linux-i586.tar.gz的下载地址 使用wget下载
wget --no-check-certificate --no-cookies --header &amp;quot;Cookie: oraclelicense=accept-securebackup-cookie&amp;quot; https://download.oracle.com/otn-pub/java/jdk/8u201-b09/42970487e3af4f5aa5bca3f542482c60/jdk-8u201-linux-x64.tar.gz  解压
tar -zxvf jdk-8u201-linux-x64.tar.gz
3. root移动文件, 并设置JAVA_HOME环境变量  移动文件夹
mv jdk1.8.0_201 /usr/local  设置JAVA_HOME环境变量
  vim /etc/profile 可以对所有用户生效 添加下列信息
export JAVA_HOME=/usr/local/jdk1.8.0_201 export JRE_HOME=${JAVA_HOME}/jre export CLASSPATH=.:${JAVA_HOME}/lib/dt.JAVA_HOME/lib/tools.jar:${JRE_HOME}/lib export PATH=${JAVA_HOME}/bin:${PATH}   重新生效/etc/profile  source /etc/profile   检测  java -version  预期会弹出java的版本</description>
    </item>
    
    <item>
      <title>更改linux用户名</title>
      <link>https://charles-one.github.io/xiaoxinLab/linux/%E6%9B%B4%E6%94%B9linux%E7%94%A8%E6%88%B7%E5%90%8D/</link>
      <pubDate>Tue, 12 Mar 2019 15:27:58 +0800</pubDate>
      
      <guid>https://charles-one.github.io/xiaoxinLab/linux/%E6%9B%B4%E6%94%B9linux%E7%94%A8%E6%88%B7%E5%90%8D/</guid>
      <description> 0.前提条件  root用户及密码 原用户ccc  1. 更改用户ccc 使用root用户编辑更改
/etc/passwd
/etc/group
/etc/shadow
/etc/gshadow
中&amp;rdquo;原用户名&amp;rdquo;为&amp;rdquo;新用户名&amp;rdquo;即可
同时
mv /home/olderuser /home/newuser  </description>
    </item>
    
    <item>
      <title>更改ssh端口与禁止root登录增强服务器安全</title>
      <link>https://charles-one.github.io/xiaoxinLab/linux/%E6%9B%B4%E6%94%B9ssh%E7%AB%AF%E5%8F%A3%E4%B8%8E%E7%A6%81%E6%AD%A2root%E7%99%BB%E5%BD%95%E5%A2%9E%E5%BC%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E5%85%A8/</link>
      <pubDate>Tue, 12 Mar 2019 14:39:09 +0800</pubDate>
      
      <guid>https://charles-one.github.io/xiaoxinLab/linux/%E6%9B%B4%E6%94%B9ssh%E7%AB%AF%E5%8F%A3%E4%B8%8E%E7%A6%81%E6%AD%A2root%E7%99%BB%E5%BD%95%E5%A2%9E%E5%BC%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E5%85%A8/</guid>
      <description>0.前提条件 1.安装软件Centos7, 版本7.6.1810 CentOS-7-x86_64-Minimal-1810.iso 2.root用户及密码, 已联网  如未联网,请打开网卡, 并重启 设置/etc/sysconfig/network-scripts/ifcfg-eth0 中ONBOOT =yes  重启电脑
reboot  1.登录root  需要查询当前Centos7的主机ip  ifconfig  提示无此命令  yum -y install net-tools
再次 ifconfig查询ip
 使用ssh软件登录root用户, 默认使用22端口, 不用指定  ssh root@ip  输入密码  2.更改ssh服务端口, 防火墙端口, SELINUX端口  更改sshd.service端口, 端口可选择&amp;gt;10000避免与其他软件冲突.  vim /etc/ssh/sshd_config更改Port 12340
systemctl restart sshd   添加防火墙端口
firewall-cmd --zone=public --add-port=12340/tcp --permanent (永久生效必须用--permanent) firewall-cmd --reload  更改SELINUX端口, 因为SELINUX的原因, ssh被设定到22端口上了, 必须更改
  借助软件来更改 安装 yum -y install policycoreutils-python semanage port -a -t ssh_port_t -p tcp 12340</description>
    </item>
    
  </channel>
</rss>